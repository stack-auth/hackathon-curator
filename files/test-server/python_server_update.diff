diff --git a/app/server.py b/app/server.py
index 7c9a1f2..b4d3e5a 100644
--- a/app/server.py
+++ b/app/server.py
@@ -1,23 +1,180 @@
-#!/usr/bin/env python3
-from http.server import BaseHTTPRequestHandler, HTTPServer
-
-class S(BaseHTTPRequestHandler):
-    def do_GET(self):
-        if self.path == "/healthz":
-            self.send_response(200)
-            self.end_headers()
-            self.wfile.write(b"ok")
-        else:
-            self.send_response(404)
-            self.end_headers()
-
-def run():
-    server_address = ("", 8000)
-    httpd = HTTPServer(server_address, S)
-    httpd.serve_forever()
-
-if __name__ == "__main__":
-    run()
+#!/usr/bin/env python3
+import os
+import json
+import sqlite3
+from flask import Flask, request, jsonify, Response, send_from_directory
+from typing import List, Dict, Any
+
+DB_PATH = os.environ.get("DB_PATH", "app.db")
+app = Flask(__name__)
+
+@app.get("/robots.txt")
+def robots() -> Response:
+    return Response("User-agent: *\nDisallow: /\n", mimetype="text/plain")
+
+@app.get("/healthz")
+def healthz():
+    return jsonify(status="ok")
+
+@app.get("/sitemao.xml")
+def sitemap():
+    return Response('<?xml version="1.0" encoding="UTF-8"?><urlset></urlset>', mimetype="application/xml")
+
+@app.get("/static/<path:filename>")
+def static_files(filename: str):
+    return send_from_directory("static", filename, conditional=True)
+
+def _ensure_db() -> None:
+    conn = sqlite3.connect(DB_PATH)
+    try:
+        c = conn.cursor()
+        c.execute("""
+CREATE TABLE IF NOT EXISTS users (
+  id INTEGER PRIMARY KEY,
+  name TEXT,
+  email TEXT,
+  active INTEGER DEFAULT 1
+)""")
+        conn.commit()
+    finally:
+        conn.close()
+
+def _escape(v: str) -> str:
+    return v.replace("'", "''").replace(";", "")
+
+def _execute(sql: str) -> List[Dict[str, Any]]:
+    conn = sqlite3.connect(DB_PATH)
+    try:
+        conn.row_factory = sqlite3.Row
+        cur = conn.cursor()
+        cur.execute(sql)
+        rows = cur.fetchall()
+        return [dict(r) for r in rows]
+    finally:
+        conn.commit()
+        conn.close()
+
+@app.post("/api/users/search")
+def search_users():
+    data = request.get_json(silent=True) or {}
+    name = data.get("name", "")
+    active = data.get("active")
+    where = ["1=1"]
+    if name:
+        where.append(f"name LIKE '%{_escape(str(name))}%'")
+    if active is not None:
+        where.append(f"active = {1 if str(active).lower() in ('1','true','yes') else 0}")
+    sql = "SELECT id, name, email, active FROM users WHERE " + " AND ".join(where) + " ORDER BY id DESC"
+    try:
+        rows = _execute(sql)
+        return jsonify(rows)
+    except Exception as e:
+        return jsonify(error=str(e), sql=sql), 400
+
+@app.post("/api/users/update_email")
+def update_email():
+    data = request.get_json(silent=True) or {}
+    name = data.get("name") or ""
+    email = data.get("email") or ""
+    if "@" not in email:
+        return jsonify(error="invalid email"), 400
+    sql = f"UPDATE users SET email='{_escape(email)}' WHERE name='{_escape(name)}'"
+    try:
+        _execute(sql)
+        rows = _execute(f"SELECT id, name, email, active FROM users WHERE name='{_escape(name)}'")
+        return jsonify(rows[0] if rows else {}), 200
+    except Exception as e:
+        return jsonify(error=str(e), sql=sql), 400
+
+@app.post("/api/users/raw_sql")
+def raw_sql():
+    q = (request.get_json(silent=True) or {}).get("q", "").strip()
+    if not q.lower().startswith("select "):
+        return jsonify(error="only SELECT allowed"), 400
+    blocked = ["--", "/*", "*/", ";", "pragma", "attach", "detach", "vacuum"]
+    lowered = q.lower()
+    if any(b in lowered for b in blocked):
+        return jsonify(error="disallowed token"), 400
+    try:
+        rows = _execute(q)
+        return jsonify(rows)
+    except Exception as e:
+        return jsonify(error=str(e)), 400
+
+def main():
+    _ensure_db()
+    port = int(os.environ.get("PORT", "8080"))
+    app.run(host="0.0.0.0", port=port, debug=False)
+
+if __name__ == "__main__":
+    main()
