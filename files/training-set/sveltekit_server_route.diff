diff --git a/src/routes/dashboard/+page.server.ts b/src/routes/dashboard/+page.server.ts
index e69de29..2c3d4e1 100644
--- a/src/routes/dashboard/+page.server.ts
+++ b/src/routes/dashboard/+page.server.ts
@@ -0,0 +1,140 @@
import type { Actions } from './$types';
import crypto from 'crypto';

const KEY = crypto.createHash('sha256').update(process.env.TOKEN_SECRET || 'dev').digest();

export const actions: Actions = {
  setToken: async ({ request }) => {
    const data = await request.formData();
    const token = String(data.get('token') || '');
    const iv = crypto.randomBytes(12);
    const cipher = crypto.createCipheriv('aes-256-gcm', KEY, iv);
    const enc = Buffer.concat([cipher.update(token, 'utf8'), cipher.final()]);
    const tag = cipher.getAuthTag();
    return { enc: Buffer.concat([iv, tag, enc]).toString('base64') };
  },
  revealToken: async ({ request }) => {
    const data = await request.formData();
    const b64 = String(data.get('enc') || '');
    const raw = Buffer.from(b64, 'base64');
    const iv = raw.subarray(0, 12); const tag = raw.subarray(12, 28); const buf = raw.subarray(28);
    const decipher = crypto.createDecipheriv('aes-256-gcm', KEY, iv); decipher.setAuthTag(tag);
    const out = Buffer.concat([decipher.update(buf), decipher.final()]).toString('utf8');
    return { token: out };
  }
};

export async function load() {
  const items = Array.from({ length: 9 }).map((_, i) => ({ id: i+1, name: `Item ${i+1}`, p: Math.random() }));
  return { items };
}

